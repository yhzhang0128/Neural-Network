function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m

X = [ones(m, 1) X];
a2 = sigmoid(Theta1 * X');

a2m = size(a2, 2);
a2 = [ones(a2m, 1) a2'];

h_theta = sigmoid((Theta2 * a2')');

for i = 1:m
    yi = zeros(1, num_labels);
    yi(y(i)) = 1;
    J = J - sum(yi.*log(h_theta(i, 1:num_labels))) ...
          - sum((1-yi).*log(1-h_theta(i, 1:num_labels)));
%    for j = 1:num_labels

%        if (j == y(i)) 
%          t = 1;
%        else
%          t = 0;
%        endif
%        J = J - t*log(h_theta(i, j)) - (1-t)*log(1-h_theta(i,j));
%    endfor
endfor
J = J / m;


% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.


for t = 1:m
    a1 = X(t, 1:size(X, 2))';
    z2 = Theta1 * a1;
    a2 = sigmoid(z2);
    a2 = [1; a2];
    z3 = Theta2 * a2;
    a3 = sigmoid(z3);
    
    yt = zeros(num_labels, 1);
    yt(y(t))=1;
    delta3 = a3 - yt;
    
%    fprintf("a3:%d", size(a3));
%    fprintf("yt:%d", size(yt));
    delta2 = Theta2' * delta3 .* [0; sigmoidGradient(z2)];
    delta2 = delta2(2:end);
    
    Theta2_grad = Theta2_grad + delta3 * a2';
    Theta1_grad = Theta1_grad + delta2 * a1';
%    fprintf("d2%d\n", size(delta2));
endfor

Theta1_grad = Theta1_grad / m;
Theta2_grad = Theta2_grad / m;


% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%


J = J + (sum(sum(Theta1.*Theta1)(2:size(Theta1, 2))) ...
         + sum(sum(Theta2.*Theta2)(2:size(Theta2, 2))))*lambda/2/m;


regTheta1 = Theta1;
regTheta1(1:size(Theta1, 1), 1) = 0;
regTheta1 = regTheta1 * lambda / m;
Theta1_grad = Theta1_grad + regTheta1;


regTheta1 = Theta1;
regTheta1(1:size(Theta1, 1), 1) = 0;
regTheta1 = regTheta1 * lambda / m;
Theta1_grad = Theta1_grad + regTheta1;

% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
